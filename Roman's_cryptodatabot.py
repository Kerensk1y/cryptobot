import telebot
from telebot import types
import config
import requests
import json
import random
import time

print('in progress...')
bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start'])
def start_message(message):
    sticker = open('sticks/sticker.webp', 'rb')
    bot.send_sticker(message.chat.id, sticker)
    
    #keybord
    markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1=types.KeyboardButton("–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?")

    markup.add(item1)
    
    bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {0.first_name}! –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è.\n–ú–µ–Ω—è –∑–æ–≤—É—Ç {1.first_name}. –° –ø—Ä–µ–≤–µ–ª–∏–∫–∏–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å üë®‚Äçüíª".format(message.from_user,bot.get_me()),
    parse_mode='html', reply_markup=markup)
        
@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?':
            
            markup=types.InlineKeyboardMarkup(row_width=2)
            item1=types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ! –ú–æ–∂–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å", callback_data='on')
            item2=types.InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ ", callback_data='off')
            
            markup.add(item1,item2)
            
            bot.send_message(message.chat.id, '–£–º–µ—é –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç—ã –∫–∞–∂–¥—ã–π —á–∞—Å. –ü—Ä–µ–¥–ª–∞–≥–∞—é –Ω–∞—á–∞—Ç—å! ü§†', reply_markup=markup)
          
        else: bot.send_message(message.chat.id, '–ù–µ –∑–Ω–∞—é —á—Ç–æ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å üòÖ')
 
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'on':
    
                markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1=types.KeyboardButton("–Ø —Å–ø–ª—é, –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–π üò¥", callback_data='off')
                item2=types.KeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å ‚è±")
                item3=types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")   
                
                markup.add(item1,item2,item3)
                while call.data == 'off':
                    b = requests.get('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd').text
                    b = json.loads(b)
                    btc = int (b['bitcoin']['usd'])

                    e = requests.get('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd').text
                    e = json.loads(e)
                    eth = int (e['ethereum']['usd'])
                    bot.send_message(call.message.chat.id,'Bitcoin: ' + str(btc) + ' usd\nEthereum: ' + str(eth) + ' usd', reply_markup=markup)
                    time.sleep(3600) 
                bot.send_message(message.chat.id, '–û–∫, –∑–∞–º–æ–ª–∫–∞—é. –ù–∞–ø–∏—à–µ—Ç–µ, –∫–∞–∫ –ø–æ–Ω–∞–¥–æ–±–ª—é—Å—å ü§ê')
                                  
            elif call.data == 'off':
                    
                markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1=types.KeyboardButton("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å ‚è±")
                item2=types.KeyboardButton("–ü—Ä–æ—Å—ã–ø–∞–π—Å—è, –ø–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞—Ç—å üòé")
                markup.add(item1, item2)
                bot.send_message(call.message.chat.id,'–•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥–µ–º —Å–ø–µ—à–∏—Ç—å', reply_markup=markup)
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–£–º–µ—é –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –∫—É—Ä—Å –∫—Ä–∏–ø—Ç—ã –∫–∞–∂–¥—ã–π —á–∞—Å.",
                reply_markup=None)
            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")
 
    except Exception as e:
        print(repr(e))

bot.polling(none_stop=True)

 #sti = open('sticks/sticker1.webp', 'rb')
           #     bot.send_sticker(message.chat.id, sti)

           #sticker = open('sticks/sticker3.webp', 'rb')
                #bot.send_sticker(message.chat.id, sticker)
                
                
